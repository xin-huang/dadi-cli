import argparse
from dadi_cli.parsers.common_arguments import *
from dadi_cli.parsers.argument_validation import *
from dadi_cli.Models import *
from dadi_cli.Stat import godambe_stat_demograpy


def _run_stat_demography(args: argparse.Namespace) -> None:
    """
    Calculates statistical properties, such as the Godambe Information Matrix, for
    demographic model estimates based on the given allele frequency spectrum.

    Parameters
    ----------
    args : Namespace
        A namespace from argparse containing all necessary parameters for the statistical
        analysis of demographic model estimates. Expected parameters include:
        - fs : str
            Path to the file containing the frequency spectrum data.
        - model : str
            The demographic model to use for the analysis.
        - model_file : str, optional
            Path or URL to a Python script containing demographic model definitions.
            If provided via URL, the script is downloaded and used for simulation.
        - bootstrapping_dir : str
            Directory containing bootstrap resamples used for estimating parameter variance.
        - grids : list of int
            List of grid sizes used in the demographic analysis for numerical accuracy.
        - demo_popt : str
            Path to the file containing optimized parameter values for the demographic model.
        - constants : list
            List of constant parameters used in the demographic model.
        - logscale : bool
            Flag indicating whether parameters should be considered on a logarithmic scale.
        - output : str
            Directory path where the results will be saved.
        - eps : float
            A small constant for numerical stability in calculations.

    """
    # # Code kept just in case user requests functionality if the future
    # if args.fs is not None:
    #     if "://" in args.fs:
    #         import urllib.request
    #         sfs_fi = open("sfs.fs","w")
    #         with urllib.request.urlopen(args.fs) as f:
    #             sfs_fi.write(f.read().decode('utf-8'))
    #         sfs_fi.close()
    #         args.fs ="sfs.fs"
    # if args.model_file is not None:
    #     if "://" in args.model_file:
    #         model_fi = open("dadi_models.py","w")
    #         with urllib.request.urlopen(args.model_file) as f:
    #             model_fi.write(f.read().decode('utf-8'))
    #         model_fi.close()
    #         args.model_file = "dadi_models"
    # if args.demo_popt is not None:
    #     if "://" in args.model_file:
    #         model_fi = open("demo_popt.bestfits","w")
    #         with urllib.request.urlopen(args.model_file) as f:
    #             model_fi.write(f.read().decode('utf-8'))
    #         model_fi.close()
    #         args.model_file = "demo_popt.bestfits"

    # Extract model function, from custom model_file if necessary
    func, _ = get_model(args.model, args.model_file)

    make_dir(args.output)

    godambe_stat_demograpy(
        fs=args.fs,
        func=func,
        bootstrap_dir=args.bootstrapping_dir,
        grids=args.grids,
        demo_popt=args.demo_popt,
        fixed_params=args.constants,
        logscale=args.logscale,
        output=args.output,
        eps_l=args.eps,
    )


def add_stat_dm_parsers(subparsers: argparse.ArgumentParser) -> None:
    """
    Adds a parser for the "StatDM" command to the subparsers collection. This function
    configures command-line arguments for performing statistical tests using the Godambe
    Information Matrix on estimates from demographic models.

    Parameters
    ----------
    subparsers : argparse.ArgumentParser
        A special action object from argparse that holds subparsers. This object is
        typically obtained from a call to `add_subparsers()` on an `ArgumentParser` object.

    """
    parser = subparsers.add_parser(
        "StatDM",
        help="Perform statistical tests using Godambe Information Matrix for demographic models.",
    )
    add_fs_argument(parser)
    add_model_argument(parser)
    add_grids_argument(parser)
    add_output_argument(parser)
    add_constant_argument(parser)
    add_eps_argument(parser)
    parser.add_argument(
        "--demo-popt",
        type=existed_file,
        dest="demo_popt",
        help="File contains the bestfit demographic parameters, generated by `dadi-cli BestFit`.",
    )
    parser.add_argument(
        "--bootstrapping-dir",
        type=str,
        required=True,
        help="Directory containing boostrapping spectra.",
        dest="bootstrapping_dir",
    )
    parser.add_argument(
        "--logscale",
        default=False,
        action="store_true",
        help="Determine whether estimating the uncertainties by assuming log-normal distribution of parameters; Default: False.",
    )

    parser.set_defaults(runner=_run_stat_demography)
